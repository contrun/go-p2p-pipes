syntax = "proto3";

option go_package = "github.com/contrun/go-p2p-pipes/p2ppipes/pb";

package p2ppipes;

service P2PPipe {
  rpc StartDiscoveringPeers(StartDiscoveringPeersRequest)
      returns (StartDiscoveringPeersResponse) {}
  rpc StopDiscoveringPeers(StopDiscoveringPeersRequest)
      returns (StopDiscoveringPeersResponse) {}
  rpc ListPeers(ListPeersRequest) returns (ListPeersResponse) {}
  rpc ListDiscoveredPeers(ListDiscoveredPeersRequest)
      returns (ListDiscoveredPeersResponse) {}
  rpc StartForwardingIO(StartForwardingIORequest)
      returns (StartForwardingIOResponse) {}
  rpc StopForwardingIO(StopForwardingIORequest)
      returns (StopForwardingIOResponse) {}
}

enum PeerDiscoveryMethod {
  PEERDISCOVERYMETHODUNDEFINED = 0;
  DHT = 1;
  MDNS = 2;
}

message DHTDiscoveryArguments { string rv = 1; }

message MDNSDiscoveryArguments {}

message StartDiscoveringPeersRequest {
  PeerDiscoveryMethod method = 1;
  oneof arguments {
    DHTDiscoveryArguments dht = 2;
    MDNSDiscoveryArguments mdns = 3;
  }
}

message StartDiscoveringPeersResponse {}

message StopDiscoveringPeersRequest {
  PeerDiscoveryMethod method = 1;
  oneof arguments {
    DHTDiscoveryArguments dht = 2;
    MDNSDiscoveryArguments mdns = 3;
  }
}

message StopDiscoveringPeersResponse {}

enum PeerType {
  PEERTYPEUNDEFIEND = 0;
  ALL = 1;
  CONNECTED = 2;
  DISCOVERED = 3;
}

message Stream {
  string connection_id = 1;
  string id = 2;
  string protocol = 3;
}

message Connection {
  string id = 1;
  string direction = 2;
  bool is_transient = 3;
  string open_time = 4;
  string local_addr = 5;
  string remote_addr = 6;
  string remote_public_key = 7;
  string multiplexer = 8;
  string security = 9;
  string transport = 10;
  repeated Stream streams = 11;
}

message Peer {
  string id = 1;
  repeated string addresses = 2;
  string connectedness = 3;
  repeated Connection connections = 4;
}

message ListPeersRequest { PeerType peer_type = 1; }

message ListPeersResponse { repeated Peer peers = 1; }

message ListDiscoveredPeersRequest {
  PeerDiscoveryMethod method = 1;
  oneof arguments {
    DHTDiscoveryArguments dht = 2;
    MDNSDiscoveryArguments mdns = 3;
  }
}

message ListDiscoveredPeersResponse { repeated Peer peers = 1; }

enum IOType {
  IOTYPEUNDEFINED = 0;
  NULL = 1; // Output will be ignored, while input will be null.
  TCP = 2;
  UDP = 3;
  UNIX = 4;
}

message NullIO {}

message IO {
  IOType io_type = 1;
  oneof io {
    NullIO null = 2;
    string tcp = 3;
    string udp = 4;
    string unix = 5;
  }
}

message StartForwardingIORequest {
  Peer peer = 1;
  IO remote_io = 2;
  IO local_io = 3;
}

message StartForwardingIOResponse {}

message StopForwardingIORequest { IO local_io = 1; }

message StopForwardingIOResponse {}
