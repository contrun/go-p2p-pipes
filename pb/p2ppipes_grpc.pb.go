// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: p2ppipes.proto

package p2ppipes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	P2PPipe_StartDiscoveringPeers_FullMethodName = "/p2ppipes.P2PPipe/StartDiscoveringPeers"
	P2PPipe_StopDiscoveringPeers_FullMethodName  = "/p2ppipes.P2PPipe/StopDiscoveringPeers"
	P2PPipe_ListPeers_FullMethodName             = "/p2ppipes.P2PPipe/ListPeers"
	P2PPipe_ForwardIO_FullMethodName             = "/p2ppipes.P2PPipe/ForwardIO"
)

// P2PPipeClient is the client API for P2PPipe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P2PPipeClient interface {
	StartDiscoveringPeers(ctx context.Context, in *StartDiscoveringPeersRequest, opts ...grpc.CallOption) (*StartDiscoveringPeersResponse, error)
	StopDiscoveringPeers(ctx context.Context, in *StopDiscoveringPeersRequest, opts ...grpc.CallOption) (*StopDiscoveringPeersResponse, error)
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	ForwardIO(ctx context.Context, in *ForwardIORequest, opts ...grpc.CallOption) (*ForwardIOResponse, error)
}

type p2PPipeClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PPipeClient(cc grpc.ClientConnInterface) P2PPipeClient {
	return &p2PPipeClient{cc}
}

func (c *p2PPipeClient) StartDiscoveringPeers(ctx context.Context, in *StartDiscoveringPeersRequest, opts ...grpc.CallOption) (*StartDiscoveringPeersResponse, error) {
	out := new(StartDiscoveringPeersResponse)
	err := c.cc.Invoke(ctx, P2PPipe_StartDiscoveringPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PPipeClient) StopDiscoveringPeers(ctx context.Context, in *StopDiscoveringPeersRequest, opts ...grpc.CallOption) (*StopDiscoveringPeersResponse, error) {
	out := new(StopDiscoveringPeersResponse)
	err := c.cc.Invoke(ctx, P2PPipe_StopDiscoveringPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PPipeClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, P2PPipe_ListPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PPipeClient) ForwardIO(ctx context.Context, in *ForwardIORequest, opts ...grpc.CallOption) (*ForwardIOResponse, error) {
	out := new(ForwardIOResponse)
	err := c.cc.Invoke(ctx, P2PPipe_ForwardIO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PPipeServer is the server API for P2PPipe service.
// All implementations must embed UnimplementedP2PPipeServer
// for forward compatibility
type P2PPipeServer interface {
	StartDiscoveringPeers(context.Context, *StartDiscoveringPeersRequest) (*StartDiscoveringPeersResponse, error)
	StopDiscoveringPeers(context.Context, *StopDiscoveringPeersRequest) (*StopDiscoveringPeersResponse, error)
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	ForwardIO(context.Context, *ForwardIORequest) (*ForwardIOResponse, error)
	mustEmbedUnimplementedP2PPipeServer()
}

// UnimplementedP2PPipeServer must be embedded to have forward compatible implementations.
type UnimplementedP2PPipeServer struct {
}

func (UnimplementedP2PPipeServer) StartDiscoveringPeers(context.Context, *StartDiscoveringPeersRequest) (*StartDiscoveringPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDiscoveringPeers not implemented")
}
func (UnimplementedP2PPipeServer) StopDiscoveringPeers(context.Context, *StopDiscoveringPeersRequest) (*StopDiscoveringPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDiscoveringPeers not implemented")
}
func (UnimplementedP2PPipeServer) ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedP2PPipeServer) ForwardIO(context.Context, *ForwardIORequest) (*ForwardIOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardIO not implemented")
}
func (UnimplementedP2PPipeServer) mustEmbedUnimplementedP2PPipeServer() {}

// UnsafeP2PPipeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PPipeServer will
// result in compilation errors.
type UnsafeP2PPipeServer interface {
	mustEmbedUnimplementedP2PPipeServer()
}

func RegisterP2PPipeServer(s grpc.ServiceRegistrar, srv P2PPipeServer) {
	s.RegisterService(&P2PPipe_ServiceDesc, srv)
}

func _P2PPipe_StartDiscoveringPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDiscoveringPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PPipeServer).StartDiscoveringPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PPipe_StartDiscoveringPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PPipeServer).StartDiscoveringPeers(ctx, req.(*StartDiscoveringPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PPipe_StopDiscoveringPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDiscoveringPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PPipeServer).StopDiscoveringPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PPipe_StopDiscoveringPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PPipeServer).StopDiscoveringPeers(ctx, req.(*StopDiscoveringPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PPipe_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PPipeServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PPipe_ListPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PPipeServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PPipe_ForwardIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardIORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PPipeServer).ForwardIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PPipe_ForwardIO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PPipeServer).ForwardIO(ctx, req.(*ForwardIORequest))
	}
	return interceptor(ctx, in, info, handler)
}

// P2PPipe_ServiceDesc is the grpc.ServiceDesc for P2PPipe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2PPipe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "p2ppipes.P2PPipe",
	HandlerType: (*P2PPipeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDiscoveringPeers",
			Handler:    _P2PPipe_StartDiscoveringPeers_Handler,
		},
		{
			MethodName: "StopDiscoveringPeers",
			Handler:    _P2PPipe_StopDiscoveringPeers_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _P2PPipe_ListPeers_Handler,
		},
		{
			MethodName: "ForwardIO",
			Handler:    _P2PPipe_ForwardIO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "p2ppipes.proto",
}
